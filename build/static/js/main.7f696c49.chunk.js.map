{"version":3,"sources":["components/NavBar/NavBar.jsx","services/tokenService.js","services/authService.js","components/SignupForm/SignupForm.jsx","pages/Signup/Signup.jsx","pages/Login/Login.jsx","pages/Users/Users.jsx","services/userService.js","pages/Invitation/Invitation.jsx","pages/Welcome/Welcome.jsx","pages/NeedSelection/NeedSelection.jsx","pages/Offer/Offer.jsx","pages/App/App.jsx","serviceWorker.js","index.js"],"names":["NavBar","user","handleLogout","className","id","href","name","onClick","getToken","token","localStorage","getItem","JSON","parse","atob","split","exp","Date","now","removeItem","setToken","setItem","getUserFromToken","removeToken","signup","fetch","BASE_URL","method","headers","Headers","body","stringify","then","res","console","log","json","Error","err","tokenService","getUser","logout","login","creds","ok","SignupForm","state","email","password","passwordConf","invite","handleChange","e","props","updateMessage","setState","target","value","handleSubmit","a","history","handleSignupOrLogin","preventDefault","authService","push","message","this","autoComplete","onSubmit","type","onChange","htmlFor","disabled","isFormInvalid","to","Component","Signup","msg","LoginPage","pw","alert","Users","users","Authorization","mode","map","Invitation","Welcome","NeedSelection","Offer","App","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.7f696c49.chunk.js","sourcesContent":["import React from 'react';\n\nconst NavBar = ({ user, handleLogout }) => {\n  return (\n    <>\n      {user ?\n        <nav>\n          <div className=\"nav-wrapper\">\n            <ul id=\"nav-mobile\" className=\"right\">\n              <li><a href=\" \" className=\"nav-link\">Welcome, {user.name}</a></li>\n              <li><a href=\"/users\" className=\"nav-link\">Users</a></li>\n              <li><a href=\"/invitation\" className=\"nav-link\">Invitation Page</a></li>\n              <li><a href=\"/welcome\" className=\"nav-link\">Welcome</a></li>\n              <li><a href=\"/needselection\" className=\"nav-link\">Need Selection</a></li>\n              <li><a href=\"/offer\" className=\"nav-link\">Offer</a></li>\n              <li><a href=\" \" className=\"nav-link\" onClick={handleLogout}>Log Out</a></li>\n            </ul>\n          </div>\n        </nav>\n        :\n        <nav>\n          <div className=\"nav-wrapper\">\n            <ul id=\"nav-mobile\" className=\"right\">\n              <li><a href=\"/login\" className=\"nav-link\">Log In</a></li>\n              {/* <li><a href=\"/users\" className=\"nav-link\">Users</a></li> */}\n              <li><a href=\"/signup\" className=\"nav-link\">Sign Up</a></li>\n            </ul>\n          </div>\n        </nav>\n      }\n    </>\n  )\n}\n\nexport default NavBar;\n","function setToken(token) {\n  localStorage.setItem(\"token\", token);\n}\n\nfunction getToken() {\n  let token = localStorage.getItem(\"token\");\n  if (token) {\n    // Check if expired, remove if it is\n    const payload = JSON.parse(atob(token.split(\".\")[1]));\n    // JWT's exp is expressed in seconds, not milliseconds, so convert\n    if (payload.exp < Date.now() / 1000) {\n      localStorage.removeItem(\"token\");\n      token = null;\n    }\n  }\n  return token;\n}\n\nfunction getUserFromToken() {\n  const token = getToken();\n  return token ? JSON.parse(atob(token.split(\".\")[1])).user : null;\n}\n\nfunction removeToken() {\n  localStorage.removeItem(\"token\");\n}\n\nexport default {\n  setToken,\n  getToken,\n  getUserFromToken,\n  removeToken,\n};","import tokenService from \"./tokenService\";\n\nconst BASE_URL = '/api/auth/';\n\nfunction signup(user) {\n  return fetch(BASE_URL + 'signup', {\n    method: 'POST',\n    headers: new Headers({'Content-Type': 'application/json'}),\n    body: JSON.stringify(user)\n  })\n  .then(res => {\n    console.log(res, '<-- response object')\n    return res.json();\n  })\n  .then(json => {\n    if(json.token) return json;\n    console.log(json, '<-- the error')\n    throw new Error(`${json.err}`)\n  })\n  .then(({ token }) => {\n    tokenService.setToken(token);\n  })\n}\n\nfunction getUser() {\n  return tokenService.getUserFromToken();\n}\n\nfunction logout() {\n  tokenService.removeToken();\n}\n\nfunction login(creds) {\n  return fetch(BASE_URL + \"login\", {\n    method: \"POST\",\n    headers: new Headers({ \"Content-Type\": \"application/json\" }),\n    body: JSON.stringify(creds),\n  })\n  .then((res) => {\n    // Valid login if we have a status of 2xx (res.ok)\n    if (res.ok) return res.json();\n    throw new Error(\"Bad Credentials!\");\n  })\n  .then(({ token }) => tokenService.setToken(token));\n}\n\nexport default {\n  signup,\n  getUser,\n  logout,\n  login,\n};","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport authService from \"../../services/authService\";\n\nclass SignupForm extends Component {\n  state = {\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    passwordConf: \"\",\n    invite: \"\"\n  };\n\n  handleChange = (e) => {\n    this.props.updateMessage(\"\");\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  handleSubmit = async (e) => {\n    const { history, updateMessage, handleSignupOrLogin } = this.props;\n    e.preventDefault();\n    try {\n      await authService.signup(this.state);\n      // Let <App> know a user has signed up!\n      handleSignupOrLogin();\n      history.push(\"/\");\n    } catch (err) {\n      updateMessage(err.message);\n    }\n  };\n\n  isFormInvalid() {\n    const { name, email, password, passwordConf } = this.state;\n    return !(name && email && password === passwordConf);\n  }\n\n  render() {\n    const { name, email, password, passwordConf, invite } = this.state;\n    return (\n      <div>\n        <h3>Sign Up</h3>\n        <form autoComplete=\"off\" onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            autoComplete=\"off\"\n            id=\"name\"\n            value={name}\n            name=\"name\"\n            onChange={this.handleChange}\n          />\n          <label htmlFor=\"name\">Name</label>\n          <input\n            type=\"text\"\n            autoComplete=\"off\"\n            id=\"email\"\n            value={email}\n            name=\"email\"\n            onChange={this.handleChange}\n          />\n          <label htmlFor=\"email\">Email</label>\n          <input\n            type=\"password\"\n            autoComplete=\"off\"\n            id=\"password\"\n            value={password}\n            name=\"password\"\n            onChange={this.handleChange}\n          />\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            autoComplete=\"off\"\n            id=\"confirm\"\n            value={passwordConf}\n            name=\"passwordConf\"\n            onChange={this.handleChange}\n          />\n          <label htmlFor=\"confirm\">Confirm Password</label>\n          <input\n            type=\"password\"\n            autoComplete=\"off\"\n            id=\"invite\"\n            value={invite}\n            name=\"invite\"\n            onChange={this.handleChange}\n          />\n          <label htmlFor=\"invite\">Invitation Code</label>\n          <button disabled={this.isFormInvalid()}>Sign Up</button>\n          &nbsp;&nbsp;\n          <Link to=\"/\">Cancel</Link>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SignupForm;\n","import React, { Component } from 'react';\nimport SignupForm from '../../components/SignupForm/SignupForm';\nimport './Signup.css';\n\nclass Signup extends Component {\n  state = {\n    message: ''\n  }\n\n  updateMessage = (msg) => {\n    this.setState({message: msg});\n  }\n\n  render() {\n    return (\n      <main>\n        <SignupForm {...this.props} updateMessage={this.updateMessage} />\n        <p>{this.state.message}</p>\n      </main>\n    );\n  }\n}\n\nexport default Signup;","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Login.css\";\nimport authService from \"../../services/authService\"\n\nclass LoginPage extends Component {\n  state = {\n    email: \"\",\n    pw: \"\",\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  handleSubmit = async (e) => {\n    const { history, handleSignupOrLogin } = this.props;\n    e.preventDefault();\n    try {\n      await authService.login(this.state);\n      // Let <App> know a user has signed up!\n      handleSignupOrLogin();\n      history.push(\"/\");\n    } catch (err) {\n      // Use a modal or toast in your apps instead of alert\n      alert('Invalid Credentials!');\n    }\n  };\n\n  render() {\n    const {email, pw} = this.state\n    return (\n      <main className=\"Login\">\n        <h3>Log In</h3>\n        <form autoComplete=\"off\" onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            autoComplete=\"off\"\n            id=\"email\"\n            value={email}\n            name=\"email\"\n            onChange={this.handleChange}\n          />\n          <label htmlFor=\"email\">Email</label>\n          <input\n            type=\"password\"\n            autoComplete=\"off\"\n            id=\"password\"\n            value={pw}\n            name=\"pw\"\n            onChange={this.handleChange}\n          />\n          <label htmlFor=\"password\">Password</label>\n          <button className=\"btn green\">Log In</button>&nbsp;&nbsp;&nbsp;\n          <Link className=\"btn red\" to=\"/\">\n            Cancel\n          </Link>\n        </form>\n      </main>\n    );\n  }\n}\n\nexport default LoginPage;\n","import React, { Component } from \"react\";\nimport { getAllUsers } from \"../../services/userService\";\n\nclass Users extends Component {\n  state = {\n    users: [],\n  };\n\n  async componentDidMount() {\n    const users = await getAllUsers();\n    this.setState({ users });\n  }\n\n  render() {\n    return (\n      <>\n        <h1>Hello. This is a list of all the users.</h1>\n        {this.state.users.map((user) => (\n          <p>{user.name}</p>\n        ))}\n      </>\n    );\n  }\n}\n\nexport default Users;","import tokenService from \"../services/tokenService\";\nconst BASE_URL = \"/api/users/\";\n\nexport function getAllUsers() {\n  return fetch(\n    BASE_URL,\n    {\n      headers: { Authorization: \"Bearer \" + tokenService.getToken() },\n    },\n    { mode: \"cors\" }\n  ).then((res) => res.json());\n}","import React, { Component } from 'react'\n\nclass Invitation extends Component {\n    state = {}\n    render() {\n        return (\n            <>\n                <h2>Invitation Page!</h2>\n                <p>\n                    plans:\n                     <ul>\n                        <li>can only see if you're logged in</li>\n                        <li>generates a random string</li>\n                        <li>with that string generation, generate new user profile</li>\n                        <li>set sign up page FIND user and update rather than make a new one</li>\n                    </ul>\n                </p>\n            </>\n        );\n    }\n}\n\nexport default Invitation;","import React, { Component } from 'react'\n\nclass Welcome extends Component {\n    state = {}\n    render() {\n        return (\n            <>\n                <h2>Welcome Page!</h2>\n                <p>\n                    plans:\n                     <ul>\n                        <li>some plans?</li>\n                    </ul>\n                </p>\n            </>\n        );\n    }\n}\n\nexport default Welcome;","import React, { Component } from 'react'\n\nclass NeedSelection extends Component {\n    state = {}\n    render() {\n        return (\n            <h2>\n                select yo' need\n            </h2>\n        );\n    }\n}\n\nexport default NeedSelection;","import React, { Component } from 'react'\n\nclass Offer extends Component {\n    state = {}\n    render() {\n        return ( \n            <h2>\n                Offer a service\n            </h2>\n         );\n    }\n}\n\nexport default Offer;","import React, { Component } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport NavBar from \"../../components/NavBar/NavBar\";\nimport Signup from \"../Signup/Signup\";\nimport Login from \"../Login/Login\";\nimport authService from \"../../services/authService\";\nimport Users from \"../Users/Users\";\nimport \"./App.css\";\nimport Invitation from \"../../pages/Invitation/Invitation\"\nimport Welcome from \"../../pages/Welcome/Welcome\"\nimport NeedSelection from \"../../pages/NeedSelection/NeedSelection\"\nimport Offer from \"../../pages/Offer/Offer\"\n\nclass App extends Component {\n  state = {\n    user: authService.getUser(),\n  };\n\n  handleLogout = () => {\n    authService.logout();\n    this.setState({ user: null });\n  };\n\n  handleSignupOrLogin = () => {\n    this.setState({ user: authService.getUser() });\n  };\n\n  render() {\n    const { user } = this.state\n    return (\n      <>\n        <NavBar user={user} handleLogout={this.handleLogout} />\n        <Route\n          exact\n          path=\"/\"\n          render={() => (\n            <main>\n              <h1>Welcome. This is an authorization template.</h1>\n            </main>\n          )}\n        />\n        <Route\n          exact\n          path=\"/signup\"\n          render={({ history }) => (\n            <Signup\n              history={history}\n              handleSignupOrLogin={this.handleSignupOrLogin}\n            />\n          )}\n        />\n        <Route\n          exact\n          path=\"/login\"\n          render={({ history }) => (\n            <Login\n              history={history}\n              handleSignupOrLogin={this.handleSignupOrLogin}\n            />\n          )}\n        />\n        <Route\n          exact\n          path=\"/users\"\n          render={() => (user ? <Users /> : <Redirect to=\"/login\" />)}\n        />\n        <Route\n          exact\n          path=\"/welcome\"\n          render={() => (\n            user ?\n              <Welcome />\n              :\n              <Redirect to=\"/login\" />)}\n        />\n        <Route\n          exact\n          path=\"/invitation\"\n          render={() => (\n            user ?\n              <Invitation />\n              :\n              <Redirect to=\"/login\" />)}\n        />\n        <Route\n          exact\n          path=\"/needselection\"\n          render={() => (\n            user ?\n              <NeedSelection />\n              :\n              <Redirect to=\"/login\" />)}\n        />\n        <Route\n          exact\n          path=\"/offer\"\n          render={() => (\n            user ?\n              <Offer />\n              :\n              <Redirect to=\"/login\" />)}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./pages/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Router>\n    <React.StrictMode>\n      <Route render={({ history }) => <App history={history} />} />\n    </React.StrictMode>\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}